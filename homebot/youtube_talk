#!/usr/local/bin/perl -w
# $Id$

# Copyright 2010, Tom Maher <tmaher\@watson.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing permissions
# and limitations und

use strict;
use XML::Simple;
use AnyEvent::XMPP;
use Data::Dumper;
# use WWW::Mechanize;
use URI::Escape;
use IO::Socket;
use Socket;
use POSIX;
use FileHandle;
use Fcntl qw/:flock/;
use File::Copy;
use Sys::Syslog qw/:standard :macros/;

use AnyEvent::XMPP::Client;
use AnyEvent::XMPP::Ext::Ping;
use AnyEvent;

use tursom;

my $DEBUG=0;
my $NUKEPID=0;
my $STOP = 0;
my $am_child = 0;
my $homebot_uid = getpwnam("homebot");

if($< == 0){
  setuid($homebot_uid) or die "setuid() failed: $!";
} elsif ($< == $homebot_uid){
} else {
  die "ERROR: must be started as root or homebot!\n";
}

my $USAGE = <<__EOS
usage: $0 
__EOS
;

while(defined($_ = shift(@ARGV))){
  (/^-h$/ or /^--help$/) and do { die $USAGE; };
  (/^-d$/ or /^--debug$/) and do { $DEBUG = 1; next; };
  (/^-r$/) and do { $NUKEPID = 1; next; };
  (/^-stop$/) and do { $STOP = 1; next; };
}


my $pidfile = "/var/run/homebot/pid";
my $bot_sock = "/var/run/homebot/sock";

if((-r $pidfile) and ($NUKEPID or $STOP)){
  kill_pidfile($pidfile);
  unlink($pidfile);
  exit(0) if($STOP);
}
  
my $pid_fh = new FileHandle;
$pid_fh->open($pidfile, O_WRONLY|O_CREAT|O_EXCL|O_TRUNC) or
  die "pidfile or can't write to it! plz clean up manually!\n";
# flock($fh, LOCK_EX|LOCK_NB) or die "can't lock lockfile: $!";

openlog("homebot", "pid", LOG_LOCAL3) or die "can't open log: $!";

syslog(LOG_DEBUG, "about to read conf files\n");
my $conf_file = "/home/homebot/conf/homebot.xml";
my $ref = XMLin($conf_file);
unless (defined($ref->{homebot})){
  unlink($pidfile);
  $pid_fh->close();
  die "can't read config file";
}
my $hb = $ref->{homebot};

my $key_file = "/home/homebot/private/pw.xml";
$ref = XMLin($key_file);
unless (defined($ref->{homebot}->{secret})){
  unlink($pidfile);
  $pid_fh->close();
  die "can't read secret";
}
my $secret = $ref->{homebot}->{secret};
$ref = undef;

my %auth_users;
foreach my $user (@{$hb->{authuser}}) {
  $auth_users{$user} = 1;
}

unlink($bot_sock);

syslog(LOG_DEBUG, "about to not fork\n");
my $child = ($DEBUG) ? 0 : fork();

if($child){
  unless($pid_fh->printf("%s", $child)) {
    my $err = $!;
    unlink($pidfile);
    die "Can't write to $pidfile: $err";
  }

  $pid_fh->close();
  exit(0);
}

if(! $DEBUG){
  my ($timeout, $max_timeout) = (1, 10);
  while(getppid() != 1 and $timeout++ < $max_timeout){
    sleep(1);
  }
  die "FATAL: Parent failed to record my PID!" unless (getppid() == 1);
}

syslog(LOG_DEBUG, "about to change umask\n");
my $old_umask = umask();
umask(0077);

my $sock_server =
  IO::Socket::UNIX->new(Type => SOCK_DGRAM,
                        Local => $bot_sock,
                        Listen => SOMAXCONN)
  or do {
    my $err = $!;
    unlink($bot_sock);
    unlink($pidfile);
    die "socket: $err";
  };

chown(5186, 100, $bot_sock) or die $!;
chmod(0760, $bot_sock);

#my $uaddr = sockaddr_un($bot_sock);
#unless(socket(SOCK_SERVER, PF_UNIX, SOCK_DGRAM, 0)) {
#  my $err = $!;
#  unlink($bot_sock);
#  unlink($pidfile);
#  die "socket: $err";
#}
#
#unless(bind(SOCK_SERVER, $uaddr)) {
#  my $err = $!;
#  unlink($bot_sock);
#  unlink($pidfile);
#  die "bind: $err";
#}

#unless(listen(SOCK_SERVER, SOMAXCONN)){
#  my $err = $!;
#  unlink($bot_sock);
#  unlink($pidfile);
#  die "listen: $!";
#}
umask($old_umask);

syslog(LOG_DEBUG, "about to not dup stdout\n");
if(!$DEBUG){
  open(STDIN, "</dev/null") or die "can't redirect stdin: $!";
  open(STDOUT, ">/dev/null") or die "can't redirect stdout: $!";
  open(STDERR, ">/dev/null") or die "can't redirect stderr: $!";
}

foreach my $exit_sig ("INT", "TERM", "QUIT"){
  $SIG{$exit_sig} = \&catch_stop;
}

$SIG{CHLD} = \&catch_child;

my $startup_msg = "Wonder Twin powers... ACTIVATE!\n$0 starting up\n" .
  gmtime((stat($0))[9]) . " - last mod date (GMT)\n" .
  gmtime(time()) . " - curr date";

my $startup_inform = "tkmaher\@gmail.com";

my $j = AnyEvent->condvar;
my $exit_normal = 0;

my $j_c;

my $cl = AnyEvent::XMPP::Client->new(debug => $DEBUG);
$cl->add_account($hb->{jid}, $secret) or die "Can't add acct";
$cl->add_extension (my $cl_ping = AnyEvent::XMPP::Ext::Ping->new);
$cl_ping->auto_timeout (60);

my $w_c = AnyEvent->io (
#                        fh => \*SOCK_SERVER,
                        fh => $sock_server,
                        poll => 'r',
                        cb => sub {
                          my $return_msg = "";
#                          recv(SOCK_SERVER, $return_msg, 192, 0);
                          $sock_server->recv($return_msg, 192, 0);
                          ack_back($cl, $return_msg);
                          $j_c->send if defined($j_c);
                        },
                       );

$cl->reg_cb
  (
   session_ready => sub {
     my ($cl, $acc) = @_;
     syslog(LOG_NOTICE, "session ready, %s notified", $startup_inform);
     $cl->send_message($startup_msg => $startup_inform, undef, 'chat');
   },

   session_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "session error: %s", $desc);
   },

   stream_error => sub {
     my ($cl, $acc, $e) = @_;
     my $en = defined($e->name()) ? $e->name() : "UNDEF";
     my $et = defined($e->text()) ? $e->text() : "UNDEF";

     syslog(LOG_NOTICE, "stream err: %s %s", $en, $et);
   },

   xml_parser_error  => sub {
     my ($cl, $acc, $e) = @_;
     syslog(LOG_NOTICE, "XML PARSING ERROR");
   },

   tls_error => sub {
     my ($cl, $acc) = @_;

     syslog(LOG_NOTICE, "TLS ERROR");
   },

   sasl_error => sub {
     my ($cl, $acc) = @_;

     syslog(LOG_NOTICE, "SASL error");
   },

   iq_auth_error  => sub {
     my ($cl, $acc, $e) = @_;
     syslog(LOG_NOTICE, "IQ Auth error");
   },

   connect => sub {
     my ($cl, $acc, $host, $port) = @_;

     syslog(LOG_NOTICE, "connected: %s:%d", $host, $port);
   },

   

   iq_xml => sub {
     my ($cl, $acc, $node) = @_;
     my $ns = defined($node->namespace()) ? $node->namespace() : "NULL";
     my $from = defined($node->attr("from")) ? $node->attr("from") : "SERVER";

     my @nr = $node->nodes;
     # my @names = map { $_->name } @nr;
     my $names_str = join(":", map { $_->name } @nr);

     syslog(LOG_NOTICE, "IQ:%d:from:%s, ns %s, nodes:%s",
            scalar(time()), $from, $ns, $names_str);

     #my $child_list = Dumper($node->nodes);
     #foreach my $child (@{$node->nodes}){
     #  syslog(LOG_NOTICE, "have child %s", Dumper($child));
     #  my $child_ns = defined($child->namespace) ? $child->namespace : "NULL";
     #  $child_list .= $child->name . "-" . $child->namespace() . ";";
     #}

     #syslog(LOG_NOTICE, "IQ: from:%s, CHILDREN:%s", $child_list);

   },

   roster_update => sub {
     my ($cl, $acc, $roster, $contacts) = @_;

     my $ct_string = "";

     foreach my $contact (@$contacts){
       $ct_string .= ";" . $contact->jid;
     }
     $ct_string =~ s/^\;//;

     syslog(LOG_NOTICE, "roster: %s", $ct_string);
   },

   roster_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "roster error: %s", $desc);
   },

   presence_update => sub {
     my ($cl, $acc, $roster, $contact, $p_old, $p_new) = @_;
     
     my $s_old = defined($p_old) ? $p_old->status : 'unavailable';
     $s_old = "available" unless($s_old =~ /./);
     my $s_new = defined($p_new) ? $p_new->status : 'unavailable';
     $s_new = "available" unless($s_new =~ /./);
     

     syslog(LOG_NOTICE, "PRESENCE: %s : %s => %s",
            $contact->jid, $s_old, $s_new);
     
   },

   presence_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "presence error: %s", $desc);
   },

   message_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "message error: %s", $desc);
   },

   disconnect => sub {
     my ($cl, $acc, $h, $p, $reas) = @_;
     $reas = "" unless defined($reas);
     syslog(LOG_NOTICE, "disconnected from %s:%s: %s", $h, $p, $reas);
     $j->broadcast;
   },

   error => sub {
     my ($cl, $acc, $err) = @_;
     syslog(LOG_WARNING, "Error: %s", $err->string);
   },
   
   contact_request_subscribe => sub {
     my ($cl, $acc, $roster, $contact) = @_;
     if (!defined($auth_users{$contact->jid})) {
       syslog(LOG_WARNING, "ILLEGAL sub request from %s", $contact->jid);
       return;
     } else {
       syslog(LOG_NOTICE, "GOOD sub request from %s", $contact->jid);
       $contact->send_subscribed();
       $contact->send_subscribe();
     }
   },

   message => sub {
     my ($cl, $acc, $msg) = @_;
     my $from_jid = bare_jid($msg->from);

     my $body = "";
     if (!defined($auth_users{$from_jid})) {
       syslog(LOG_WARNING, "unauthorized message from '%s'", $from_jid);
       return;
     }

     my $video_id = yt_get_video_id($msg->body());
     if(!defined($video_id)){
       $body = "Hi, I'm homebot\@tursom.org.\nSend me a youtube URL.";
       $cl->send_message($body => $from_jid, undef, 'chat');
       syslog(LOG_INFO, "other msg from %s: %s", $from_jid, $msg->body());
       return;
     }
     return unless($msg->body() =~ /./);

     syslog(LOG_INFO, "youtube URL from %s: %s", $from_jid, $video_id);

     my $child = fork();
     if ($child == 0) {
       $am_child = $$;
       #close(SOCK_SERVER);
       $sock_server->close();
       close($cl->get_account($hb->{jid})->connection()->{socket});
       #my $conn = $cl->get_account($hb->{jid})->connection();
       #close($conn->{socket});

       foreach my $exit_sig ("INT", "TERM", "QUIT"){
         $SIG{$exit_sig} = \&catch_null;
       }

       $j = undef;
       $j_c = undef;
       my $ih = do_fetch($from_jid, $video_id);

       udp_ack("homebot\@tursom.org", "what's going on?");
       
       exit(0);
     }
     AnyEvent::XMPP::IM::Connection->new()->ping($cl);
     $j_c = AnyEvent->condvar;
   },
  );


while(!$exit_normal){
  $cl->start;
  syslog(LOG_NOTICE, "homebot connected");
  $j->recv();
  if($am_child){
    syslog(LOG_WARNING, "ERROR, child %s escaped from outer loop!?!", $$);
    exit(1);
  }
  $j = AnyEvent->condvar;
  sleep(1) unless ($exit_normal);
}

unlink($bot_sock);
unlink($pidfile);

syslog(LOG_NOTICE, "exiting");

exit 0;

sub bare_jid {
  my $from = defined($_[0]) ? shift : "";
  $from =~ s/\/.*$//g;
  #  printf("other me!\n");
  return $from;
}

sub is_youtube {
  my $full_msg = shift;

  chomp($full_msg);
  my @msgs = split(/\n/m, $full_msg);
  my $vid_id = undef;

  foreach my $msg (@msgs){
    syslog(LOG_INFO, "line: %s", $msg);

    $msg =~ /http:\/\/(www.|)youtube\.com\/.*watch\?([\w\d_\.\%\&\(\)\;=-]+)/;
    my $url_arg_string = $2;
    # syslog(LOG_INFO, "1: %s, 2: '%s'", $1, $2);
    my @url_args = split(/\&/, $url_arg_string);
    my %kv = ();
    foreach my $kv (@url_args){
      my ($key, $value) = split(/=/, $kv);
      $kv{$key} = $value;
    }

    if(defined($kv{v}) and $kv{v} =~ /^[\w\d_\.-]+$/){
      $vid_id = $kv{v};
    }
  }
  return $vid_id if(defined($vid_id));

  return 0;

  #if ($msg =~ /http:\/\/(www.|)youtube.com\/watch\?v=/) {
  #   return 1;
  #} else {
  #  return 0;
  #}
}

sub do_fetch {
  my $jid = shift;
  my $v = shift;
  
  syslog(LOG_INFO, "in do fetch, jid %s", $jid);

  my $ih = yt_get_info($v);

  if($ih =~ /^ERROR:/){
    udp_ack($jid, $ih);
    return 0;
  }

  my $lock_file = sprintf("/var/run/homebot/lock/%s", $v);
  my $lock_fh = FileHandle->new();
  if(!$lock_fh->open($lock_file, O_WRONLY|O_CREAT|O_EXCL)){
    udp_ack($jid, "Error: fetch already in progress for $v, '" .
            $ih->{title} . "'");
    return 0;
  }

  #my $m = WWW::Mechanize->new;

  #my $yt = "http://www.youtube.com";
  #my $resp = $m->get("$yt/get_video_info?video_id=$v");
  #if (! $resp->is_success) {
  #  udp_ack($jid, "get_video_info returned errror: " . $resp->status_line);
  #  return;
  #}

  #my @info = split(/&/, $resp->content());

  #foreach my $arg (@info) {
  #  my ($key, $val) = split(/=/, $arg);
  #  $ih->{$key} = uri_unescape($val);
  #}

  if ($ih->{status} !~ /^ok/i) {
    udp_ack($jid, "video status for $v is NOT OK");
    unlink($lock_file);
    $lock_fh->close();
    return 0;
  }
  my $len = length_trans($ih->{length_seconds});

  udp_ack($jid, "video id: " . $v . "\n" . $ih->{title} . "\n" .
          $len . "\nStarting fetch.  This will take a few minutes.\n");

  # my $save_dir = "/home/tv/media/youtube/";
  my $save_dir = "/afs/tursom/u/tv/media/youtube/";
  my $fetch_result = yt_fetch_vid($v, $ih, $save_dir);
  syslog(LOG_INFO, "%s fetching %s for %s", $fetch_result, $v, $jid);
  $fetch_result =~ s/$save_dir//;
  udp_ack($jid, $fetch_result);

  unlink($lock_file);
  $lock_fh->close();

  return 0 if($fetch_result =~ /^ERROR/);
  return 1;

 #$ih->{retval} = 1;
 #
 #my ($hd, $hd_msg, $hd_pfx) = (0, "", "");
 #my $suffix="flv";
 #my $hd_url_suffix="";
 #if($ih->{fmt_map} =~ /^6\/720000\/7\/0\/0$/){
 #$hd=1;
 #$hd_msg = "HIGH DEF AVAILABLE\n";
 #$hd_pfx = "HD-";
 #$suffix="mp4";
 #$hd_url_suffix="&fmt=22";
 #}
 #
 #my $save_file = sprintf("/home/tv/media/youtube/%s%s.%s.%s",
 #$hd_pfx, $ih->{title}, $v, $suffix);
 #
 #my $vid_url=sprintf("%s/get_video?video_id=%s&t=%s%s",
 #$yt, $v, $ih->{token}, $hd_url_suffix);
 #
 #if( -r $save_file){
 #udp_ack($jid, "VIDEO ALREADY DOWNLOADED\nvideo id: " . $v . "\n" .
 #$ih->{title} . "\n" . $len . "\n");
 #return;
 #}
 #
 #udp_ack($jid, "video id: " . $v . "\n" . $ih->{title} . "\n" .
 #$len . "\n" . $hd_msg . "Starting fetch\n");
 #
 #syslog(LOG_INFO, "about to call mechanize: '%s' to '%s'",
 #$vid_url, $save_file);
 #$resp = $m->get($vid_url, ":content_file" => $save_file);
 #syslog(LOG_INFO, "back from mechanize!, %s", $resp->status_line);
 #
 #if(! ($resp->is_success() and -r $save_file)){
 #udp_ack($jid, $ih->{title} . " fetch failed\n" . $resp->status_line);
 #}
 #
 #udp_ack($jid, "'" . $ih->{title} .
 #"' download complete. On tivo, see\nlambic.tursom.org->youtube");
}

sub udp_ack {
  my $jid = shift;
  my $body = shift;

  socket(SOCK_CLIENT, PF_UNIX, SOCK_DGRAM, 0) or return;
  my $us = sockaddr_un($bot_sock);

  my $msg = join("||", $jid, $body);

  send(SOCK_CLIENT, $msg, 0, $us);
  close(SOCK_CLIENT);

  return;
}

sub ack_back {
  my $cl_handle = shift;
  my $msg = shift;

  syslog(LOG_DEBUG, "received udp message to ack:\n%s\n", $msg);
  my ($jid, $body) = split(/\|\|/, $msg);
  $jid = bare_jid($jid);

  $cl_handle->send_message($body => $jid, undef, 'chat');
}

sub length_trans {
  my $total_seconds = shift;
  return "" unless($total_seconds =~ /^\d+$/);

  my $hours = int($total_seconds / 3600);
  $total_seconds %= 3600;

  my $minutes = int($total_seconds / 60);
  $total_seconds %= 60;

  my $seconds = $total_seconds;

  my $length;
  if ($hours > 0) {
    $length = sprintf("%d hour", $hours);
    if ($hours > 1) {
      $length .= "s";
    }
    $length .= ", ";
  }

  if ($minutes > 0) {
    $length .= sprintf("%d minute", $minutes);
    if ($minutes > 1) {
      $length .= "s";
    }
    $length .= ", ";
  }

  if ($seconds > 0) {
    $length .= sprintf("%d second", $seconds);
    if ($seconds > 1) {
      $length .= "s";
    }
  }

  return $length;
}

sub catch_stop {
  my $signame = shift;

  my $body = "Homebot shutdown at " . gmtime(time()) . " GMT";

  $cl->send_message($body => $startup_inform, undef, "chat");

  my $conn = $cl->get_account($hb->{jid})->connection();
  die "can't find jid $hb->{jid}" unless defined $conn;

  $conn->send_presence("unavailable", [], ());
  $conn->drain();

  $exit_normal = 1;
  $j->broadcast();
  # $cl->disconnect();
}

sub catch_null {
  exit(1);
}

sub catch_child { wait (); }

