#!/usr/local/bin/perl -w
# $Id$

# Copyright 2010, Tom Maher <tmaher\@tursom.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing permissions
# and limitations und

use strict;
use utf8;
use XML::Simple;
use AnyEvent::XMPP;
use Data::Dumper;
use URI::Escape;
use IO::Socket;
use Socket;
use POSIX;
use FileHandle;
use Fcntl qw/:flock/;
use File::Copy;
use Sys::Syslog qw/:standard :macros/;

use AnyEvent;
use AnyEvent::HTTP;
use AnyEvent::XMPP::Client;
use AnyEvent::XMPP::Ext::Ping;

use tursom;

my $DEBUG=0;
my $NUKEPID=0;
my $STOP = 0;
my $am_child = 0;
my $homebot_uid = getpwnam("homebot");

if ($< == 0) {
  setuid($homebot_uid) or die "setuid() failed: $!";
} elsif ($< == $homebot_uid) {
} else {
  die "ERROR: must be started as root or homebot!\n";
}

my $USAGE = <<__EOS
usage: $0 
__EOS
  ;

while (defined($_ = shift(@ARGV))) {
  (/^-h$/ or /^--help$/) and do { die $USAGE; };
  (/^-d$/ or /^--debug$/) and do { $DEBUG = 1; next; };
  (/^-r$/) and do { $NUKEPID = 1; next; };
  (/^-stop$/) and do { $STOP = 1; next; };
}


my $pidfile = "/var/run/homebot/pid";
my $bot_sock = "/var/run/homebot/sock";

if ((-r $pidfile) and ($NUKEPID or $STOP)) {
  kill_pidfile($pidfile);
  unlink($pidfile);
  exit(0) if($STOP);
}
  
my $pid_fh = new FileHandle;
$pid_fh->open($pidfile, O_WRONLY|O_CREAT|O_EXCL|O_TRUNC) or
  die "pidfile or can't write to it! plz clean up manually!\n";

openlog("homebot", "pid", LOG_LOCAL3) or die "can't open log: $!";

syslog(LOG_DEBUG, "about to read conf files\n");
my $conf_file = "/home/homebot/conf/homebot.xml";
my $ref = XMLin($conf_file);
unless (defined($ref->{homebot})) {
  unlink($pidfile);
  $pid_fh->close();
  die "can't read config file";
}
my $hb = $ref->{homebot};

my $key_file = "/home/homebot/private/pw.xml";
$ref = XMLin($key_file);
unless (defined($ref->{homebot}->{secret})) {
  unlink($pidfile);
  $pid_fh->close();
  die "can't read secret";
}
my $secret = $ref->{homebot}->{secret};
$ref = undef;

my %auth_users;
foreach my $user (@{$hb->{authuser}}) {
  $auth_users{$user} = 1;
}

unlink($bot_sock);

syslog(LOG_DEBUG, "about to not fork\n");
my $child = ($DEBUG) ? 0 : fork();

if ($child) {
  unless($pid_fh->printf("%s", $child)) {
    my $err = $!;
    unlink($pidfile);
    die "Can't write to $pidfile: $err";
  }

  $pid_fh->close();
  exit(0);
}

if (! $DEBUG) {
  my ($timeout, $max_timeout) = (1, 10);
  while (getppid() != 1 and $timeout++ < $max_timeout) {
    sleep(1);
  }
  die "FATAL: Parent failed to record my PID!" unless (getppid() == 1);
}

syslog(LOG_DEBUG, "about to change umask\n");
my $old_umask = umask();
umask(0077);

my $sock_server =
  IO::Socket::UNIX->new(Type => SOCK_DGRAM,
                        Local => $bot_sock,
                        Listen => SOMAXCONN)
  or do {
    my $err = $!;
    unlink($bot_sock);
    unlink($pidfile);
    die "socket: $err";
  };

chown(5186, 100, $bot_sock) or die $!;
chmod(0760, $bot_sock);

umask($old_umask);

syslog(LOG_DEBUG, "about to not dup stdout\n");
if (!$DEBUG) {
  open(STDIN, "</dev/null") or die "can't redirect stdin: $!";
  open(STDOUT, ">/dev/null") or die "can't redirect stdout: $!";
  open(STDERR, ">/dev/null") or die "can't redirect stderr: $!";
}
foreach my $exit_sig ("INT", "TERM", "QUIT") {
  $SIG{$exit_sig} = \&catch_stop;
}

$SIG{CHLD} = \&catch_child;

my $startup_msg = "Wonder Twin powers... ACTIVATE!\n$0 starting up\n" .
  gmtime((stat($0))[9]) . " - last mod date (GMT)\n" .
  gmtime(time()) . " - curr date";

my $startup_inform = "tkmaher\@gmail.com";

my $j = AnyEvent->condvar;
my $exit_normal = 0;

my $j_c;

my $cl = AnyEvent::XMPP::Client->new(debug => $DEBUG);
$cl->add_account($hb->{jid}, $secret) or die "Can't add acct";
$cl->add_extension (my $cl_ping = AnyEvent::XMPP::Ext::Ping->new);
$cl_ping->auto_timeout (60);

my $w_c;
$w_c = AnyEvent->io (
                     fh => $sock_server,
                     poll => 'r',
                     cb => sub {
                       my $return_msg = "";
                       $sock_server->recv($return_msg, 192, 0);
                       ack_back($cl, $return_msg);
                     },
                    );

$cl->reg_cb
  (
   session_ready => sub {
     my ($cl, $acc) = @_;
     syslog(LOG_NOTICE, "session ready, %s notified", $startup_inform);
     $cl->send_message($startup_msg, $startup_inform, undef, 'chat');
   },

   session_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "session error: %s", $desc);
   },

   stream_error => sub {
     my ($cl, $acc, $e) = @_;
     my $en = defined($e->name()) ? $e->name() : "UNDEF";
     my $et = defined($e->text()) ? $e->text() : "UNDEF";

     syslog(LOG_NOTICE, "stream err: %s %s", $en, $et);
   },

   xml_parser_error  => sub {
     my ($cl, $acc, $e) = @_;
     syslog(LOG_NOTICE, "XML PARSING ERROR");
   },

   tls_error => sub {
     my ($cl, $acc) = @_;

     syslog(LOG_NOTICE, "TLS ERROR");
   },

   sasl_error => sub {
     my ($cl, $acc) = @_;

     syslog(LOG_NOTICE, "SASL error");
   },

   iq_auth_error  => sub {
     my ($cl, $acc, $e) = @_;
     syslog(LOG_NOTICE, "IQ Auth error");
   },

   connect => sub {
     my ($cl, $acc, $host, $port) = @_;

     syslog(LOG_NOTICE, "connected: %s:%d", $host, $port);
   },

   iq_xml => sub {
     my ($cl, $acc, $node) = @_;
     my $ns = defined($node->namespace()) ? $node->namespace() : "NULL";
     my $from = defined($node->attr("from")) ? $node->attr("from") : "SERVER";

     my @nr = $node->nodes;
     my $names_str = join(":", map { $_->name } @nr);

     syslog(LOG_NOTICE, "IQ:%d:from:%s, ns %s, nodes:%s",
            scalar(time()), $from, $ns, $names_str);


   },

   roster_update => sub {
     my ($cl, $acc, $roster, $contacts) = @_;

     my $ct_string = "";

     foreach my $contact (@$contacts) {
       $ct_string .= ";" . $contact->jid;
     }
     $ct_string =~ s/^\;//;

     syslog(LOG_NOTICE, "roster: %s", $ct_string);
   },

   roster_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "roster error: %s", $desc);
   },

   presence_update => sub {
     my ($cl, $acc, $roster, $contact, $p_old, $p_new) = @_;
     
     my $s_old = defined($p_old) ? $p_old->status : 'unavailable';
     $s_old = "available" unless($s_old =~ /./);
     my $s_new = defined($p_new) ? $p_new->status : 'unavailable';
     $s_new = "available" unless($s_new =~ /./);
     

     syslog(LOG_NOTICE, "PRESENCE: %s : %s => %s",
            $contact->jid, $s_old, $s_new);
     
   },

   presence_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "presence error: %s", $desc);
   },

   message_error => sub {
     my ($cl, $acc, $e) = @_;
     my $desc = defined($e->condition()) ? $e->condition() : "undefined err";
     syslog(LOG_NOTICE, "message error: %s", $desc);
   },

   disconnect => sub {
     my ($cl, $acc, $h, $p, $reas) = @_;
     $reas = "" unless defined($reas);
     syslog(LOG_NOTICE, "disconnected from %s:%s: %s", $h, $p, $reas);
     $j->broadcast;
   },

   error => sub {
     my ($cl, $acc, $err) = @_;
     syslog(LOG_WARNING, "Error: %s", $err->string);
   },
   
   contact_request_subscribe => sub {
     my ($cl, $acc, $roster, $contact) = @_;
     if (!defined($auth_users{$contact->jid})) {
       syslog(LOG_WARNING, "ILLEGAL sub request from %s", $contact->jid);
       return;
     } else {
       syslog(LOG_NOTICE, "GOOD sub request from %s", $contact->jid);
       $contact->send_subscribed();
       $contact->send_subscribe();
     }
   },

   message => sub {
     my ($cl, $acc, $msg) = @_;
     my $from_jid = bare_jid($msg->from);

     my $body = "";
     if (!defined($auth_users{$from_jid})) {
       syslog(LOG_WARNING, "unauthorized message from '%s'", $from_jid);
       return;
     }

     my $vid = yt_get_video_id($msg->body());
     if (!defined($vid)) {
       $body = "Hi, I'm homebot\@tursom.org.\nSend me a youtube URL, not " .
         $msg->body;
       $cl->send_message($body, $from_jid, undef, 'chat');
       syslog(LOG_INFO, "other msg from %s: %s", $from_jid, $msg->body());
       return;
     }
     return unless($msg->body() =~ /./);

     my $info_url =
       sprintf("http://www.youtube.com/get_video_info?video_id=%s&el=%s",
               $vid, "vevo");
     my $info_req;
     $info_req = http_get $info_url, recurse => 0, sub {
       undef $info_req;
       my ($body, $hdr) = @_;
       my $xmpp_msg;

       syslog(LOG_INFO, "youtube URL from %s: %s", $from_jid, $vid);
         
       if ($hdr->{Status} =~ /^59/) {
         $xmpp_msg = "Info Fetch error: " . $hdr->{Reason};
         $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
         return;
       } elsif ($hdr->{Status} !~ /^2/) {
         $xmpp_msg = "unexpected status code: " . $hdr->{Status};
         $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
         return;
       }
       my @kvs = split(/\&/, $body);
       my %md = ();

       foreach my $kv (@kvs) {
         my ($key, $val) = split(/\=/, $kv);
         $val =~ s/\+/ /g;
         $md{$key} = uri_unescape($val);
         utf8::decode($md{$key});
         $md{$key} =~ s/\x{FEFF}//g;
       }

       $md{title} =~ s,/,-,g;
       $md{title} =~ s/^\.+/_/;
       if ($md{status} !~ /^ok/i) {
         $xmpp_msg = "Video $vid NOT OK: $body";
         $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
         return;
       }

       my $lock_file = sprintf("/var/run/homebot/lock/%s", $vid);
       my $lock_fh = FileHandle->new();
       if (!$lock_fh->open($lock_file, O_WRONLY|O_CREAT|O_EXCL)) {
         $xmpp_msg =
           sprintf("Error: fetch already in progress for %s, '%s'",
                   $vid, $md{title});
         $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
         return;
       }
       my $len = length_trans($md{length_seconds});
       $xmpp_msg = "video id: $vid, $len\n$md{title}\nStarting Fetch!\n";
       $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');

       my %fmt_urls = ();
       my @fmt_prefs = (22, 18, 35, 34, 6, 5);
       my @fmt_urls_ordered = ();

       my @fmt_prefs_descriptive =
         ("hd1080", "hd720", "large", "medium", "small");
       if(defined($md{url_encoded_fmt_stream_map})){
         my @assets_raw = split(/,/, $md{url_encoded_fmt_stream_map});
         my @assets = ();
         foreach my $asset (@assets_raw){
           my $asset = {};
           @kvs = split(/\&/, $asset);
           foreach my $kv (@kvs) {
             my ($key, $val) = split(/\=/, $kv);
             $val =~ s/\+/ /g;
             $asset->{$key} = uri_unescape($val);
             utf8::decode($asset->{$key});
             $asset->{$key} =~ s/\x{FEFF}//g;
           }
           push(@assets, $asset);
         }
         foreach my $fmt (@fmt_prefs_descriptive){
           foreach my $asset (@assets){
             if($asset->{quality} == $fmt){
               push(@fmt_urls_ordered, $asset->{url});
             }
           }
         }
       }



       if(0){
         # old token-based code
         if(defined($md{fmt_url_map})){
           @kvs = split(/,/, $md{fmt_url_map});
           foreach my $kv (@kvs){
             my ($f_val, $url) = split(/\|/, $kv);
             $fmt_urls{$f_val} = $url;
           }
           foreach my $pick (@fmt_prefs){
             if(defined($fmt_urls{$pick})){
               push(@fmt_urls_ordered, $fmt_urls{$pick});
             }
           }
         } else {
           my $fetch_url_base =
             sprintf("http://www.youtube.com/get_video?video_id=%s&t=%s",
                     $vid, $md{token});
           foreach my $fmt (@fmt_prefs){
             push(@fmt_urls_ordered, $fetch_url_base . "&fmt=" . $fmt);
           }
         }
       }


       my $save_dir = "/afs/tursom.org/u/tv/media/youtube/";
       my $out_file = sprintf("%s%s.%s.mp4", $save_dir, $md{title}, $vid);
       if (-s $out_file) {
         $lock_fh->close();
         unlink($lock_file);
         $xmpp_msg =
           sprintf("Error: already have file\n'%s'", $out_file);
         $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
         return;
       }
       my $out_fh = new FileHandle;
       $out_fh->open("> $out_file");
                       

       sub down_the_hole {
         my ($candidate_urls, $from_jid, $out_fh, $lock_fh, $out_file,
             $lock_file, $cl, $md, $data, $hdr) = @_;

         my $xmpp_msg;
         if ($hdr->{Status} =~ /^4/) {
           if ($#{$candidate_urls} < 0) {
             $out_fh->close(); $lock_fh->close(); unlink($lock_file);

             $xmpp_msg = "Failed on $md->{title}: can't find valid format";
             $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
             return;
           }

           my $fetch_url = shift(@{$candidate_urls});
           my $req_ctx;
           $req_ctx = http_get $fetch_url, timeout => 600,
             on_body => sub { $out_fh->print($_[0]) if(length($_[0]) > 0); },
               sub { undef $req_ctx;
                     down_the_hole($candidate_urls, $from_jid, $out_fh,
                                   $lock_fh, $out_file, $lock_file, $cl, $md, @_);
                     
                   };
         } else {

           $out_fh->close(); $lock_fh->close(); unlink($lock_file);
           
           if ($hdr->{Status} =~ /^59/) {
             $xmpp_msg = "Vid Fetch error: " . $hdr->{Reason};
             $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
             return;
           }
           $xmpp_msg = "Succes!  Saved $md->{title}\n$out_file";
           $cl->send_message($xmpp_msg, $from_jid, undef, 'chat');
         }
       }

       my $fetch_req;
       my $first_url = shift(@fmt_urls_ordered);
       $fetch_req =
         http_get $first_url, recurse => 10, timeout => 600,
           on_body => sub { $out_fh->print($_[0]) if(length($_[0]) > 0); },
             sub { undef $fetch_req;
                   down_the_hole(\@fmt_urls_ordered, $from_jid, $out_fh,
                                 $lock_fh, $out_file, $lock_file, $cl, \%md, @_);
                 };
     };
   }
);
     
     
while (!$exit_normal) {
  $cl->start;
  syslog(LOG_NOTICE, "homebot connected");
  $j->recv;
  if ($am_child) {
    syslog(LOG_WARNING, "ERROR, child %s escaped from outer loop!?!", $$);
    exit(1);
  }
  $j = AnyEvent->condvar;
  syslog(LOG_NOTICE, "am are looping");
  sleep(1) unless ($exit_normal);
}
syslog(LOG_NOTICE, "am are done looping");

unlink($bot_sock);
unlink($pidfile);

syslog(LOG_NOTICE, "exiting");

exit 0;

sub bare_jid {
  my $from = defined($_[0]) ? shift : "";
  $from =~ s/\/.*$//g;
  return $from;
}

sub is_youtube {
  my $full_msg = shift;

  chomp($full_msg);
  my @msgs = split(/\n/m, $full_msg);
  my $vid_id = undef;

  foreach my $msg (@msgs) {
    syslog(LOG_INFO, "line: %s", $msg);

    $msg =~ /http:\/\/(www.|)youtube\.com\/.*watch\?([\w\d_\.\%\&\(\)\;=-]+)/;
    my $url_arg_string = $2;
    my @url_args = split(/\&/, $url_arg_string);
    my %kv = ();
    foreach my $kv (@url_args) {
      my ($key, $value) = split(/=/, $kv);
      $kv{$key} = $value;
    }

    if (defined($kv{v}) and $kv{v} =~ /^[\w\d_\.-]+$/) {
      $vid_id = $kv{v};
    }
  }
  return $vid_id if(defined($vid_id));

  return 0;

}

sub do_fetch {
  my $jid = shift;
  my $v = shift;
  
  syslog(LOG_INFO, "in do fetch, jid %s", $jid);

  my $ih = yt_get_info($v);

  if ($ih =~ /^ERROR:/) {
    udp_ack($jid, $ih);
    return 0;
  }

  my $lock_file = sprintf("/var/run/homebot/lock/%s", $v);
  my $lock_fh = FileHandle->new();
  if (!$lock_fh->open($lock_file, O_WRONLY|O_CREAT|O_EXCL)) {
    udp_ack($jid, "Error: fetch already in progress for $v, '" .
            $ih->{title} . "'");
    return 0;
  }

  if ($ih->{status} !~ /^ok/i) {
    udp_ack($jid, "video status for $v is NOT OK");
    unlink($lock_file);
    $lock_fh->close();
    return 0;
  }
  my $len = length_trans($ih->{length_seconds});

  udp_ack($jid, "video id: " . $v . "\n" . $ih->{title} . "\n" .
          $len . "\nStarting fetch.  This will take a few minutes.\n");

  my $save_dir = "/afs/tursom.org/u/tv/media/youtube/";
  my $fetch_result = yt_fetch_vid($v, $ih, $save_dir);
  syslog(LOG_INFO, "%s fetching %s for %s", $fetch_result, $v, $jid);
  $fetch_result =~ s/$save_dir//;
  udp_ack($jid, $fetch_result);

  unlink($lock_file);
  $lock_fh->close();

  return 0 if($fetch_result =~ /^ERROR/);
  return 1;
}

sub udp_ack {
  my $jid = shift;
  my $body = shift;

  socket(SOCK_CLIENT, PF_UNIX, SOCK_DGRAM, 0) or return;
  my $us = sockaddr_un($bot_sock);

  my $msg = join("||", $jid, $body);

  send(SOCK_CLIENT, $msg, 0, $us);
  close(SOCK_CLIENT);

  return;
}

sub ack_back {
  my $cl_handle = shift;
  my $msg = shift;

  syslog(LOG_DEBUG, "received udp message to ack:\n%s\n", $msg);
  my ($jid, $body) = split(/\|\|/, $msg);
  $jid = bare_jid($jid);

  $cl_handle->send_message($body, $jid, undef, 'chat');
}

sub length_trans {
  my $total_seconds = shift;
  return "" unless($total_seconds =~ /^\d+$/);

  my $hours = int($total_seconds / 3600);
  $total_seconds %= 3600;

  my $minutes = int($total_seconds / 60);
  $total_seconds %= 60;

  my $seconds = $total_seconds;

  my $length;
  if ($hours > 0) {
    $length = sprintf("%d hour", $hours);
    if ($hours > 1) {
      $length .= "s";
    }
    $length .= ", ";
  }

  if ($minutes > 0) {
    $length .= sprintf("%d minute", $minutes);
    if ($minutes > 1) {
      $length .= "s";
    }
    $length .= ", ";
  }

  if ($seconds > 0) {
    $length .= sprintf("%d second", $seconds);
    if ($seconds > 1) {
      $length .= "s";
    }
  }

  return $length;
}

sub catch_stop {
  my $signame = shift;

  my $body = "Homebot shutdown at " . gmtime(time()) . " GMT";

  $cl->send_message($body, $startup_inform, undef, "chat");

  my $conn = $cl->get_account($hb->{jid})->connection();
  die "can't find jid $hb->{jid}" unless defined $conn;

  $conn->send_presence("unavailable", [], ());
  $conn->drain();

  $exit_normal = 1;
  $j->broadcast();
}

sub catch_null {
  exit(1);
}

sub catch_child { wait (); }
