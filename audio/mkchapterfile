#!/usr/bin/env ruby

require 'json'
require 'open3'

class AudioFile < File
  @avinfo = nil
  class ProbeFail < StandardError ;end

  def initialize audio_file
    dump,e,s = Open3.capture3("avprobe", "-of", "json", "-show_format",
                              File.realpath(audio_file)
                              )
    @avinfo = JSON.parse(dump)['format']
    raise ProbeFail, e unless s.success?
    super
  end

  def avinfo; @avinfo end
  def [](key) @avinfo[key.to_s] end
  def duration; self[:duration].to_f end
  def method_missing(name) self[name] end
end

def seconds_to_hmsms ts
  total_msec = (ts * 1000.0).to_i
  total_sec, msec = total_msec.divmod 1000
  total_min, sec = total_sec.divmod 60
  total_hr, min = total_min.divmod 60

  sprintf "%02d:%02d:%02d.%03d", total_hr, min, sec, msec
end

chapters = ARGV.reduce(Array.new) {|files, path| files | Dir.glob(path) }
raise "\nneed one or more files" if chapters.first.nil?

chapters.sort!
chapters.map! { |path| AudioFile.new path }

read_time = 0.0
marks = [0.0] | (chapters.map { |c| read_time += c.duration }).slice(0..-2)

count = 0
marks.each do |mark|
  count += 1
  puts "#{seconds_to_hmsms mark} Chapter #{count}"
end
