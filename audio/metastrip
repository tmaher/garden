#!/usr/bin/env ruby

require 'trollop'
require 'open3'
require 'shellwords'

def shellout *args
  raise "Strings only!" unless args.all? { |a| a.kind_of? String }
  args[0] = Shellwords.escape args[0]
  o,e,s = Open3.capture3(*args)
  raise "\nargs\n#{args}\nstderr\n#{e}\n" unless s.success?
  o
end

opts = Trollop::options do
  opt :audio, "audio input file", :type => String, :default => ""
  opt :meta, "metadata input file", :type => String, :default => ""
  opt :out_dir, "output directory", :type => String, :default => "final"
  opt :force, "overwrite output & art", :default => false
end

metafile=nil
Trollop::die :audio, "need audio file" unless File.readable? opts[:audio]
if opts[:meta].empty?
  audio_base = File.basename(opts[:audio], ".m4a")
  bookdir = File.realpath "#{File.dirname(opts[:audio])}/../"
  candidates = Dir.glob("#{bookdir}/itunes/*/#{audio_base}.{aax,m4a,m4b}")
  raise "can't infer metafile" if candidates.empty?
  raise "too many meta-candidates" if candidates.length > 1
  metafile = candidates[0]
else
  Trollop::die :meta, "need metadata" unless File.readable? opts[:meta]
  metafile = opts[:meta]
end

Dir.mkdir opts[:out_dir] if opts[:force] and !(Dir.exists? opts[:out_dir])
unless Dir.exists? opts[:out_dir]
  if File.exists? opts[:out_dir]
    Trollop::die :out_dir, "must specify *directory* for output"
  else
    Trollop::die :out_dir, "no such output directory"
  end
end
out = File.join opts[:out_dir], File.basename(opts[:audio])
File.unlink out if opts[:force] and File.readable? out
Trollop::die :out_dir, "output already exists" if File.readable? out
if [opts[:audio], metafile, opts[:output]].uniq.count != 3
  Trollop::die :audio, "audio, meta, and out must be different" ;end

shellout('avconv', '-i', opts[:audio], '-i', metafile,
          '-map', '0:0', '-codec:0:0', 'copy',
          '-map_metadata:g', '1', '-map_chapters', '1',
          out)

meta_art = metafile.gsub(/\.(aax|m4a|m4b)\z/i, '.art[0].jpg')
shellout('mp4art', '--extract', metafile) unless File.readable? meta_art
raise "can't generate artfile" unless File.readable? meta_art

shellout('mp4art', '-z', '--add', meta_art, out)

puts "*"*40
puts "metadata-merged file is #{out}"
