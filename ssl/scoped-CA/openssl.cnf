# OpenSSL config file for my personal stuff!
# https://github.com/tmaher/garden/tree/master/ssl

HOME                            = $ENV::HOME/garden/ssl
oid_section                     = new_oids
########
# NOTE # - global RANDFILE lives outside of source control!!!
########
RANDFILE                        = $ENV::HOME/private/ssl/.randfile-global



[ ca ]
default_ca                      = CA_default



[ CA_default ]
dir                             = $HOME
certs                           = $dir/certs
crl_dir                         = $dir/crl
database                        = $dir/scoped-CA/index.txt
new_certs_dir                   = $dir/newcerts
serial                          = $dir/scoped-CA/serial
crl                             = $dir/crl.pem
x509_extensions	                = usr_cert
name_opt                        = ca_default
cert_opt                        = ca_default
default_days                    = 365      # how long to certify for
default_crl_days                = 30       # how long before next CRL
default_md                      = sha1     # which md to use.
preserve                        = no       # keep passed DN ordering
certificate                     = $dir/scoped-CA/tursom-scoped-ca.crt

########
# NOTE # - private key & CA's RANDFILE live outside of source control!!!
########
private_key                     = $ENV::HOME/private/ssl/tursom-scoped-ca.key
RANDFILE                        = $ENV::HOME/private/ssl/.randfile-ca

# Extension copying option.  If you explicitly trust all CSRs (e.g., you
# create them yourself), and you're not worried about the CSR including
# inappropriate extensions or policies, then blanket copying all
# extensions from CSR into signed cert is completely appropriate.
copy_extensions                 = copy

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy                          = policy_match



[ policy_match ]
# For the CA policy
countryName                     = match
stateOrProvinceName             = match
organizationName                = match
organizationalUnitName          = optional
commonName                      = supplied
emailAddress                    = optional



[ new_oids ]
# This section left intentionally blank.



[ policy_anything ]
# For the 'anything' policy At this point in time, you must list all
# acceptable 'object' types.
countryName                     = optional
stateOrProvinceName             = optional
localityName                    = optional
organizationName                = optional
organizationalUnitName          = optional
commonName                      = supplied
emailAddress                    = optional



[ req ]
default_bits		        = 2048
default_keyfile 	        = privkey.pem
distinguished_name	        = req_distinguished_name
attributes		        = req_attributes
x509_extensions	                = v3_ca
string_mask                     = nombstr
req_extensions                  = v3_req
default_md                      = sha1



[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_default             = US
countryName_min                 = 2
countryName_max                 = 2
stateOrProvinceName             = State or Province Name (full name)
stateOrProvinceName_default     = California
localityName                    = Locality Name (eg, city)
localityName_default            = San Francisco
0.organizationName              = Organization Name (eg, company)
0.organizationName_default      = Tursom Foundation
organizationalUnitName          = Organizational Unit Name (eg, section)
organizationalUnitName_default  =
commonName			= Common Name (eg, FQDN)
commonName_max			= 64
emailAddress			= Email Address
emailAddress_max		= 64
# SET-ex3                       = SET extension number 3



[ req_attributes ]
challengePassword               = A challenge password
challengePassword_min           = 4
challengePassword_max           = 20
unstructuredName                = An optional company name



[ usr_cert ]
# These extensions are added when the CA signs a request.
# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.
basicConstraints                = CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.
# This is OK for an SSL server.
#nsCertType                     = server

# For an object signing certificate this would be used.
#nsCertType                     = objsign

# For normal client use this is typical
#nsCertType                     = client, email

# and for everything including object signing:
#nsCertType                     = client, email, objsign

# This is typical in keyUsage for a client certificate.
#keyUsage                       = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment                       = "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
#subjectAltName                  = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
#subjectAltName                  = email:move

# Copy subject details
#issuerAltName                   = issuer:copy

#nsCaRevocationUrl               = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName



[ v3_req ]
# Extensions to add to a certificate request
basicConstraints                = CA:FALSE
keyUsage                        = nonRepudiation, digitalSignature, keyEncipherment
#subjectAltName                  = @alt_names



[ alt_names ]
#DNS.1 = bock.tursom.org
#DNS.2 = lambic.tursom.org



[ v3_ca ]
# Extensions for a typical CA
# copy_extensions               = copy

# PKIX recommendation.
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always,issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints                = critical,CA:true
# So we do this instead.
basicConstraints                 = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
#keyUsage                        = cRLSign, keyCertSign

# Some might want this also
#nsCertType                      = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
#subjectAltName                  = email:copy
# Copy issuer details
#issuerAltName                   = issuer:copy



[ crl_ext ]
authorityKeyIdentifier          = keyid:always,issuer:always



[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate
proxyCertInfo                   = critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.
basicConstraints                = CA:FALSE

# This will be displayed in Netscape's comment listbox.
nsComment                       = "OpenSSL Generated Certificate"

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
#nsCertType                      = server

# For an object signing certificate this would be used.
#nsCertType                      = objsign

# For normal client use this is typical
#nsCertType                      = client, email

# and for everything including object signing:
#nsCertType                      = client, email, objsign

# This is typical in keyUsage for a client certificate.
#keyUsage                        = nonRepudiation, digitalSignature, keyEncipherment

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
#subjectAltName                  = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
#subjectAltName                  = email:move
# Copy subject details
#issuerAltName                   = issuer:copy
#nsCaRevocationUrl               = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

